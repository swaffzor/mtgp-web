{"version":3,"sources":["types.ts","components/Card.tsx","components/CardList.tsx","components/Input.tsx","components/CardShelf.tsx","service.ts","utils.ts","components/DeckImport.tsx","components/NavLink.tsx","components/NavBar.tsx","pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","ColorIdentity","Rarity","Layout","Legality","CardSort","SetType","BoosterCardType","style","Card","cardProps","onClick","useState","probability","setProbability","imageUrl","hasImage","setHasImage","useEffect","drawProbability","toFixed","quantity","className","join","src","alt","onError","isSaved","type","power","toughness","name","CardList","Input","value","placeholder","classOverrides","inputRef","onChange","onKeyPress","onBlur","onFocus","text","e","ref","CardShelf","id","cards","title","button","onCardClick","search","setSearch","useSearchLock","setUseSearchLock","shelfType","setShelfType","sort","setSort","sortDirection","setSortDirection","searchRef","useRef","current","focus","CardDisplay","card","index","imageLayout","length","target","console","log","Object","keys","map","key","direction","prev","a","b","filter","toLowerCase","includes","CardFetchError","statusCode","message","setPrototypeOf","prototype","Error","fetchCard","request","params","buildParameters","fetch","response","json","Number","entries","param","cardSearch","parseBy","regEx","RegExp","match","trim","calculateProbability","deck","deckTotal","reduce","curr","DeckImport","setDeck","setNotFound","isHidden","setIsHidden","setText","buttonDisabled","setButtonDisabled","cardsNotFound","setCardsNotFound","handleButtonClick","importDeck","empty","textLines","split","promises","line","cardRequest","set","then","find","undefined","findIndex","catch","error","imagelessCard","Promise","resolve","reject","all","minRows","disabled","NavLink","url","NavBar","Home","searchText","setSearchText","searchResults","setSearchResults","myDeck","setMyDeck","myHand","setMyHand","notFound","savedCards","localStorage","getItem","JSON","parse","searchCards","cardNames","c","setDeckFn","tempDeck","deckCard","splice","removeCardFromDeck","forEach","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b78715e4.chunk.js","sourcesContent":["export enum Color {\n\tWhite,\n\tBlue,\n\tBlack,\n\tRed,\n\tGreen,\n}\nexport enum ColorIdentity {\n\tW, U, B, R, G,\n}\nexport enum Rarity {\n\t\"Basic Land\",\n\t\"Common\",\n\t\"Uncommon\",\n\t\"Mythic Rare\",\n\t\"Timeshifted\",\n\t\"Masterpiece\",\n}\nexport enum Layout {\n\tnormal,\n\tsplit,\n\tflip,\n\t\"double-faced\",\n\ttoken,\n\tplane,\n\tscheme,\n\tphenomenon,\n\tleveler,\n\tvanguard,\n}\nexport enum Legality {\n\tLegal,\n\tBanned,\n\tRestricted,\n}\n\nexport interface BlockLegality {\n\tformat: string;\n\tlegality: keyof typeof Legality;\n}\n\nexport interface CardDTO {\n\tname: string;\n\tmanaCost: string;\n\tcmc: number;\n\tcolors: (keyof typeof Color)[];\n\tcolorIdentity: (keyof typeof ColorIdentity)[];\n\ttype: string;\n\tsupertypes: string[];\n\ttypes: string[];\n\tsubtypes: string[];\n\trarity: keyof typeof Rarity;\n\tset: string;\n\tsetName: string;\n\tartist: string;\n\tflavor?: string;\n\tlayout: keyof typeof Layout;\n\tmultiverseid: number;\n\timageUrl: string;\n\tvariations: number[];\n\tprintings: string[];\n\toriginalText: string;\n\toriginalType: string;\n\tlegalities: BlockLegality[];\n\tid: string;\n\tpower?: string;\n\ttoughness?: string;\n\tisSaved?: boolean;\n\tquantity?: number;\n\tdrawProbability?: number\n}\n\nexport enum CardSort {\n\tname = \"name\",\n\tmanaCost = \"manaCost\",\n\tcmc = \"cmc\",\n\tdrawProbability = \"drawProbability\",\n\tquantity = \"quantity\",\n\ttype = \"type\",\n\tpower = \"power\"\n}\nexport interface PlaneswalkerCard {\n\tloyalty: number;\n}\n\nexport interface CardRequestParam {\n\tname?: string;\n\tlayout?: string;\n\tcmc?: number;\n\tcolors?: string;\n\tcolorIdentity?: string;\n\ttype?: string;\n\tsupertypes?: string;\n\ttypes?: string;\n\tsubtypes?: string;\n\trarity?: string;\n\tset?: string;\n\tsetName?: string;\n\ttext?: string;\n\tflavor?: string;\n\tartist?: string;\n\tnumber?: string;\n\tpower?: string;\n\ttoughness?: string;\n\tloyalty?: number;\n\tforeignName?: string;\n\tlanguage?: string;\n\tgameFormat?: string;\n\tlegality?: keyof typeof Legality;\n\tpage?: number;\n\tpageSize?: number;\n\torderBy?: string;\n\trandom?: boolean;\n\tcontains?: string;\n\tquantity?: string;\n}\n\nexport interface PaginationFilter {\n\tpage?: number;\n\tpageSize?: number;\n}\n\nexport interface SetFilter {\n\tname?: string;\n\tblock?: string;\n}\n\nexport enum SetType {\n\tcore,\n\texpansion,\n\treprint,\n\tbox,\n\tun,\n\t\"from the vault\",\n\t\"premium deck\",\n\t\"duel deck\",\n\tstarter,\n\tcommander,\n\tplanechase,\n\tarchenemy,\n\tpromo,\n\tvanguard,\n\tmasters,\n}\n\nexport enum BoosterCardType {\n\tmarketing,\n\tland,\n\tcommon,\n\tuncommon,\n\trare,\n\t\"mythic rare\",\n}\n\nexport type Booster = (keyof typeof BoosterCardType | (keyof typeof BoosterCardType)[])[];\n\nexport interface Set {\n\tname: string;\n\tblock?: string;\n\tcode: string;\n\tgathererCode?: string;\n\ttype?: string;\n\toldCode?: string;\n\tmagicCardsInfoCode?: string;\n\treleaseDate: string;\n\tborder: \"white\" | \"black\" | \"silver\";\n\texpansion: keyof typeof SetType;\n\tonlineOnly?: true;\n\tbooster?: Booster;\n}","import React, { useEffect, useState } from 'react'\nimport { CardDTO } from '../types'\n\ninterface props {\n  cardProps: Partial<CardDTO>\n  onClick?: () => void\n}\nconst style = {\n  height: \"h-44\",\n  width: \"w-30\",\n  vitalWidth: \"w-12\"\n}\n\nconst Card = ({cardProps, onClick}: props) => {\n  const [probability, setProbability] = useState(\"\")\n  const [hasImage, setHasImage] = useState(!!cardProps.imageUrl)\n  \n  useEffect(() => {\n    setProbability(`${cardProps.drawProbability?.toFixed(1) ?? \"\"} %`)\n  }, [cardProps?.drawProbability, cardProps?.quantity])\n\n  return (\n    <div \n      className={\n        [\n          `relative`,\n          `m-1 w-32`,\n          onClick && \"cursor-pointer\"\n        ].join(' ')\n      }\n      onClick={() => onClick && onClick()}\n    >\n      <div className={`my-6`}>\n        {\n          hasImage\n          ? \n          <img \n            src={cardProps?.imageUrl}\n            alt=\"card art\"\n            onError={() => setHasImage(false)}\n            className={`${cardProps?.isSaved ? \"\" : \"border-2 border-red-400 rounded-lg border-dashed\"}`}\n          />\n          : \n          <div className={`relative ${style.height} ${cardProps?.isSaved ? !hasImage && \"border-2 rounded-lg\" : \"border-2 border-red-400 rounded-lg border-dashed\"}`}>\n            {cardProps.type === \"imageless\" && \"No Data Available\"}\n            <div className={`absolute bottom-0 right-1`}>\n              {cardProps?.power && `${cardProps?.power}/${cardProps?.toughness}`}\n            </div>\n          </div> \n        }\n        <div className={`relative`}>\n          <div className={`absolute text-red-600 bg-green-200 h-8 bottom-28 left-12 px-2 rounded-lg`}>\n            {probability}\n          </div>\n        </div>\n        <div className={`text-xs`}>\n          {cardProps?.name} {cardProps.quantity && `(${cardProps.quantity})`}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React, { useEffect, useState } from 'react'\nimport { CardDTO } from '../types'\n\ninterface props {\n  cardProps: Partial<CardDTO>\n  onClick?: () => void\n}\n\nconst CardList = ({cardProps, onClick}: props) => {\n\n  return (\n    <div \n      className={\n        [\n          `relative`,\n          `m-1`,\n          onClick && \"cursor-pointer\"\n        ].join(' ')\n      }\n      onClick={() => onClick && onClick()}\n    >\n      <div className={`my-2 border-2 border-blue-800 rounded-lg p-2`}>\n        <div className={`flex items-center relative text-xs justify-start h-12`}>\n          <div className={`absolute top-0`}>\n            {cardProps.quantity}\n          </div>\n          <div className={`absolute bottom-0`}>\n            {`${cardProps.drawProbability?.toFixed(1)}%`}\n          </div>\n          <div className={`ml-12`}>\n            {cardProps.name} \n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\n\ninterface Props {\n  type: string\n  value?: string\n  placeholder?: string\n  classOverrides?: string\n  inputRef?: React.RefObject<HTMLInputElement>\n  onChange?: (text: React.ChangeEvent<HTMLInputElement>) => void\n  onKeyPress?: (e: React.KeyboardEvent) => void\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void\n}\n\nconst Input = ({type, value, placeholder, classOverrides, inputRef, onChange, onKeyPress, onBlur, onFocus}: Props) => {\n\n  return (\n    <div className=\"relative h-10\">\n      <input type={type}\n        value={value}\n        className={classOverrides} \n        placeholder={placeholder} \n        onChange={(text) => onChange && onChange(text)}\n        onKeyPress={(e) => onKeyPress && onKeyPress(e)}\n        onFocus={(e) => onFocus && onFocus(e)}\n        onBlur={(e) => onBlur && onBlur(e)}\n        ref={inputRef}\n      />\n    </div>\n  )\n}\n\nexport default Input","import React, { useEffect, useRef, useState } from 'react'\nimport { CardDTO, CardSort } from '../types'\nimport Card from './Card'\nimport CardList from './CardList'\nimport Input from './Input'\n\ninterface Props {\n  id: string\n  cards: CardDTO[]\n  shelfType: \"image\"|\"list\"\n  title?: string\n  button?: {text: string, onClick?: () => void}\n  onCardClick?: (card: CardDTO) => void\n}\n\ninterface CardDisplayProps {\n  card: CardDTO\n  index: number\n}\n\nconst CardShelf = ({id, cards, title, button, onCardClick}: Props) => {\n  const [search, setSearch] = useState(\"\")\n  const [useSearchLock, setUseSearchLock] = useState(false)\n  const [shelfType, setShelfType] = useState<\"image\"|\"list\">(\"list\")\n  const [sort, setSort] = useState<CardSort>(CardSort.name)\n  const [sortDirection, setSortDirection] = useState<\"\"|\"ASC\"|\"DESC\">(\"\")\n  const searchRef = useRef<HTMLInputElement>(null)\n  const numColumns = 10\n\n  useEffect(() => {\n    searchRef.current?.focus()\n  }, [])\n\n  const CardDisplay = shelfType === \"image\" \n    ? ({card, index}: CardDisplayProps) => \n      <Card \n        cardProps={card} \n        onClick={() => onCardClick && onCardClick(card)}\n        key={`${id}-${card.name}-${index}`}\n      />\n    : ({card, index}: CardDisplayProps) => \n      <CardList\n        cardProps={card} \n        onClick={() => onCardClick && onCardClick(card)}\n        key={`${id}-${card.name}-${index}`}\n      />\n\n  const imageLayout = [\n    `justify-items-center`,\n    `flex-col grid grid-flow-row gap-x-0`,\n    `grid-cols-3`,\n    `sm:grid-cols-4`,\n    `md:grid-cols-5`,\n    `lg:grid-cols-6`,\n    `xl:grid-cols-7`,\n    `2xl:grid-cols-${numColumns} grid-rows-${cards.length/numColumns}`\n    ].join(' ')\n\n  return (\n    <div className=\"mx-1 mt-10 border-2 border-black rounded-md relative\">\n      <div className={``}>\n        {title }\n      </div>\n      <div className=\"border-b-2 border-black flex items-center justify-center\">\n        <div className=\"m-2\">\n          Lock Search\n          <Input\n            type=\"checkbox\"\n            onChange={() => setUseSearchLock(!useSearchLock)}\n            classOverrides=\"m-2\"\n          />\n        </div>\n        <Input\n          type=\"text\"\n          placeholder=\"Search Deck\"\n          onChange={(text) => setSearch(text.target.value)}\n          classOverrides={`px-2 border border-2 border-gray-600 rounded-lg`}\n          onBlur={() => {\n            console.log(\"ref\")\n            useSearchLock && searchRef.current?.focus()\n          }}\n          inputRef={searchRef}\n        />\n\n        {\n          Object.keys(CardSort).map(key => {\n            return <div className={`m-2 cursor-pointer ${sort === key && \"border-b-2 border-gray-600\"}`} key={key} onClick={() => {\n              let direction: \"\"|\"ASC\"|\"DESC\" = \"\"\n              switch (sortDirection) { \n                case \"\":\n                  direction = \"ASC\"\n                  break;\n                  case \"ASC\":\n                    direction = \"DESC\"\n                    break;\n                    case \"DESC\":\n                      direction = \"ASC\"\n                      break;\n                      default:\n                        break;\n                      }\n                      setSort((prev) => {\n                        setSortDirection(prev !== sort ? sortDirection : direction)\n                        return key as CardSort\n                      })\n                    }}>\n              {`${key}`}\n            </div>\n          })\n        }\n\n\n      <div>\n        Display Cards\n        <Input\n          type=\"checkbox\"\n          onChange={() => {setShelfType(shelfType === \"image\" ? \"list\" : \"image\")}}\n        />\n      </div>\n    </div>\n\n      <div className={shelfType === \"image\" ? imageLayout : `grid grid-cols-6 gap-x-0`}>\n        {cards.sort((a, b) => {\n          const direction = sortDirection === \"DESC\" ? -1 : 1\n          return (a[sort] ?? 0) > (b[sort] ?? 0) ? 1 * direction : -1 * direction\n        })\n        .filter(card => card.name.toLowerCase().includes(search.toLowerCase()))\n        .map((card, index) => {\n          return (\n            <CardDisplay card={card} index={index} key={`${title}-${index}`}/>)\n        })}\n      </div>\n      {button?.text && <div className=\"border-t-2 border-black\">\n        <button \n          onClick={() => button.onClick && button.onClick()} \n        >\n          {button.text}\n        </button>\n      </div>}\n    </div>\n  )\n}\n\nexport default CardShelf\n","import { CardDTO, CardRequestParam } from \"./types\"\n\nconst baseURL = \"https://api.magicthegathering.io/v1\"\n\nexport class CardFetchError extends Error {\n  statusCode: number;\n  key?: string;\n  cardProps: CardRequestParam;\n  constructor(\n    statusCode: number,\n    message: string,\n    cardProps: CardRequestParam,\n  ) {\n    super();\n    this.message = message;\n    this.name = 'Fetch Error';\n    this.statusCode = statusCode;\n    this.cardProps = cardProps;\n    Object.setPrototypeOf(this, CardFetchError.prototype);\n  }\n}\n\nexport const fetchCard = async (request: CardRequestParam): Promise<CardDTO[]> => {\n  const params = buildParameters(request)\n  const response = await fetch(`${baseURL}/cards${params}`)\n  const cards = (await response.json()).cards as CardDTO[]\n\n  if (cards.length < 1) {\n    // api returns [] for anything not found\n    throw new CardFetchError(404, `Card Not Found`, request)\n  }\n\n  return cards.map(card => {\n    return {\n      ...card,\n      quantity: Number(request.quantity)\n    }\n  })\n}\n\nconst buildParameters = (request: CardRequestParam) => {\n  const params = Object.entries(request).map(([key, value]) => value ? `${key}=${value}` : \"\")\n    .filter(param => !param.includes(\"quantity\"))\n  return params.length > 0 ? `?${params.join(\"&\")}` : \"\"\n}\n\nexport const cardSearch = async (text: string) => {\n  return fetchCard({name: text})\n}","import { CardDTO } from \"./types\"\n\nexport const parseBy = (key: string, text: string) => {\n  let regEx = RegExp(\"\")\n  switch (key) {\n    case \"name\":\n      regEx = / [A-Za-z-,' ]+ /g\n      break;\n    case \"quantity\":\n      regEx = /[0-9]+ /g\n      break;\n    default:\n      break;\n  }\n  return text.match(regEx)?.join(\"\").trim()\n}\n\nexport const calculateProbability = (deck: CardDTO[]) => {\n  const deckTotal = deck.map(card => card.quantity).reduce((prev, curr) => {\n    return (prev ?? 0) + (curr ?? 0)\n  }, 0)\n\n  return deck.map(card => {\n    card.drawProbability = card?.quantity && (card?.quantity / (deckTotal ?? deck.length) * 100)\n    return card\n  })\n}","import React, { useEffect, useState } from 'react'\nimport Input from './Input'\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { CardDTO, CardRequestParam } from '../types';\nimport { fetchCard, CardFetchError } from '../service';\nimport { calculateProbability, parseBy } from '../utils';\n\ninterface Props {\n  setDeck: (d: CardDTO[]) => void\n  setNotFound: (v: string[]) => void\n}\n\nconst DeckImport = ({setDeck, setNotFound}: Props) => {\n  const [isHidden, setIsHidden] = useState(true)\n  const [text, setText] = useState(\"\")\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n  const [cardsNotFound, setCardsNotFound] = useState<string[]>([])\n\n  useEffect(() => {\n    setNotFound(cardsNotFound)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cardsNotFound])\n\n  const handleButtonClick = async () => {\n    if (isHidden) {\n      setIsHidden(!isHidden)\n    } else {\n      setButtonDisabled(true)\n      setDeck(await importDeck())\n      setIsHidden(!isHidden)\n      setButtonDisabled(false)\n    }\n  }\n\n  const empty = {} as CardDTO\n  const importDeck = async () => {\n    const textLines = text.split(\"\\n\")\n    const promises = textLines.map(line => {\n        const cardRequest: CardRequestParam = {\n          name: parseBy(\"name\", line),\n          set: line.match(/\\([A-Za-z]+[0-9]*\\)/g)?.join(\"\").trim().match(/[A-Za-z0-9]+/g)?.join(\"\").trim(),\n          quantity: parseBy(\"quantity\", line),\n        }\n        if (!cardRequest.name  && !cardRequest.quantity ) {\n          return empty\n        } \n\n        return fetchCard(cardRequest)\n          .then(cards => {\n            return cards?.find(card => card.imageUrl !== undefined) ?? (\n              cards.length > 0 \n                ? cards[cards.findIndex(card => card.name)] \n                : empty\n              )\n          })\n          .catch((error: CardFetchError) => {\n            error.statusCode === 404 && setCardsNotFound([...cardsNotFound, `${error.cardProps?.quantity} ${error.cardProps?.name} (${error.cardProps?.set})` ?? \"unknown card import error\"])\n            const imagelessCard = {name: cardRequest.name, quantity: cardRequest.quantity, type: \"imageless\"} as CardDTO\n            return new Promise<CardDTO>((resolve, reject) => resolve(imagelessCard)) \n          })\n    })\n    const cards = (await Promise.all(promises)).filter(card => card !== empty)\n    // await replaceImagelessCards(cards)\n    calculateProbability(cards)\n    return cards\n  }\n\n  const replaceImagelessCards = async (cards: CardDTO[]) => {\n    const cardsWithoutImages = cards.filter(card => !card.imageUrl)\n    const newReq = cardsWithoutImages.map(card => {\n      return (card.type !== \"imageless\" \n        ? fetchCard({name: card.name, contains: \"imageUrl\", quantity: card.quantity?.toString()}) \n        : new Promise<CardDTO[]>((resolve, reject) => resolve([card]))\n      )\n      .then(res => res.find(findCard => findCard.imageUrl !== \"\") ?? card)})\n    const cardsMostLikelyWithImages = await Promise.all(newReq)\n    // eslint-disable-next-line array-callback-return\n    cardsMostLikelyWithImages.map((card) => {\n      const index = cards.findIndex(imagelessCard => imagelessCard.name === card.name)\n      index >= 0 && index < cards.length && cards.splice(index, 1, {...card, quantity: Number(card.quantity)})\n    })\n  }\n\n  return (\n    <div className=\"relative m-1\">\n      <div className={`w-32 left-0 ${isHidden && \"hidden\"}`}>\n        <Input\n          type=\"text\"\n          placeholder=\"Deck Name\"\n          classOverrides=\"border rounded-lg px-1 w-32 left-0\"\n        />\n        <TextareaAutosize \n          className=\"border rounded-lg px-1 left-0 w-80\"\n          minRows={6}\n          onChange={(e) => {setText(e.target.value)}}\n        />\n        <br />\n      </div>\n      <div className=\"border rounded-lg px-4 w-32\">\n        <button\n          className={`${buttonDisabled && \"text-gray-400\"}`}\n          onClick={handleButtonClick} \n          disabled={buttonDisabled}\n        >\n          {buttonDisabled ? \"Loading...\" : \"Import Deck\"}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default DeckImport","import React from 'react'\n\ninterface Props {\n  text: string\n  url: string\n}\n\nconst NavLink = ({text, url}: Props) => {\n\n  return (\n    <div>\n      <button>\n        {text}\n      </button>\n    </div>\n  )\n}\n\nexport default NavLink","import React from 'react'\nimport NavLink from './NavLink'\n\nconst NavBar = () => {\n\n  return (\n    <div className=\"border border-b-2 border-blue-400 m-2\">\n      <NavLink \n        text=\"Home\"\n        url=\"\"\n      />\n    </div>\n  )\n}\n\nexport default NavBar","import React, { useEffect, useState } from 'react'\nimport CardShelf from '../components/CardShelf'\nimport DeckImport from '../components/DeckImport'\nimport Input from '../components/Input'\nimport NavBar from '../components/NavBar'\nimport { cardSearch } from '../service'\nimport { CardDTO } from '../types'\nimport { calculateProbability } from '../utils'\n\n\nconst Home = () => {\n  const [searchText, setSearchText] = useState(\"\")\n  const [searchResults, setSearchResults] = useState<CardDTO[]>([])\n  const [myDeck, setMyDeck] = useState<CardDTO[]>([])\n  const [myHand, setMyHand] = useState<CardDTO[]>([])\n  const [notFound, setNotFound] = useState<string[]>([])\n\n  useEffect(() => {\n    const savedCards = localStorage.getItem(\"my-deck\")\n    savedCards && setMyDeck(JSON.parse(savedCards))\n  }, [])\n\n  const searchCards = async (e: React.KeyboardEvent) => {\n    if (e.key.toLowerCase() === \"enter\") {\n      const response = await cardSearch(searchText)\n      setSearchResults(response)\n    }\n  }\n\n  const saveCards = () => {\n    myDeck.forEach(card => card.isSaved = true)\n    localStorage.setItem(\"my-deck\", JSON.stringify(myDeck))\n  }\n\n  const drawCard = (card: CardDTO) => {\n    card.quantity = card?.quantity && card?.quantity - 1\n    calculateProbability(myDeck);\n    if ((card.quantity??0) > 0) {\n      setMyDeck(myDeck)\n    } else {\n      setMyDeck([...myDeck].filter(deckCard => deckCard.name !== card.name))      \n    }\n    setMyHand([...myHand, card])\n  }\n\n  const removeCardFromDeck = (card: CardDTO, deck: CardDTO[], setDeckFn: (deck: CardDTO[])=>void) => {\n    const tempDeck = [...deck]\n    const index = tempDeck.findIndex(deckCard => deckCard.name === card.name)\n    tempDeck.splice(index, 1)\n    setDeckFn(tempDeck)\n  }\n\n  return (\n    <div>\n      <h1>\n        Magic Stats Gathering  \n      </h1>\n\n      <NavBar/>\n\n      <DeckImport\n        setDeck={setMyDeck}\n        setNotFound={(cardNames: string[]) => setNotFound([...notFound, ...cardNames])}\n      />\n\n      <Input\n        placeholder=\"search\" \n        type=\"text\"\n        classOverrides=\"absolute left-1 w-1/4 border rounded-md my-2 pl-1\" \n        onChange={(text) => {setSearchText(text.target.value)}}\n        onKeyPress={async (e) => {await searchCards(e)}}\n      />\n\n      {searchText && (\n      <CardShelf\n        id=\"search-results\"\n        title=\"Search Results\"\n        cards={searchResults}\n        shelfType=\"image\"\n        onCardClick={(card) => setMyDeck([...myDeck, card])}\n      />)}\n\n      {notFound.length > 0 && \n        (<div>\n          <h1>Not Found</h1>\n          {notFound.map(c =>\n            <div key={`notfound-${c}`}>\n              {c}\n            </div>\n          )}\n        </div>)\n      }\n\n      <CardShelf\n        id=\"hand\"\n        title=\"In Hand\"\n        cards={myHand}\n        shelfType=\"image\"\n        onCardClick={(card) => removeCardFromDeck(card, myHand, setMyHand)}\n      />\n\n      <CardShelf\n        id=\"my-deck\"\n        title=\"My Deck\"\n        cards={myDeck}\n        shelfType=\"image\"\n        button={{text: \"Save\", onClick: saveCards}}\n        onCardClick={drawCard}\n      />\n\n    </div>\n  )\n}\n\nexport default Home","import React from 'react';\nimport './App.css';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App m-4\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}